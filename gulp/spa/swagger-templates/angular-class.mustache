/*
 * Copyright (c) 2015-2017 PointSource, LLC.
 * MIT Licensed
 */

/**************************************************************************************************
 Generated code -- Do not edit
**************************************************************************************************/

/*jshint -W069 */
/*global angular:false */
angular.module('{{&moduleName}}', []).provider('{{&className}}', {{&className}}Provider);

angular.module('app').requires.push('{{&moduleName}}');

function {{ &className }}Provider() {
    'use strict';

    var domain = '{{&domain}}';
    this.setURL = function(url) {
        domain = url;
    }

    this.$get = function($q, $http) {
        function {{&className}}(){
            {{#isSecure}}
                this.token = {};
            {{/isSecure}}
        }

        {{&className}}.transformRequest = function(obj) {
            var str = [];
            for(var p in obj) {
                var val = obj[p];
                if(angular.isArray(val)) {
                   val.forEach(function(val){
                     str.push(encodeURIComponent(p) + "=" + encodeURIComponent(val));
                   });
                } else {
                   str.push(encodeURIComponent(p) + "=" + encodeURIComponent(val));
                }
            }
            return str.join("&");
        };

        {{#isSecure}}
            /**
             * Set Token
             * @method
             * @name {{&className}}#setToken
             * @param {string} value - token's value
             * @param {string} headerOrQueryName - the header or query name to send the token at
             * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
             *
             */
            {{&className}}.prototype.setToken = function (value, headerOrQueryName, isQuery) {
                this.token.value = value;
                this.token.headerOrQueryName = headerOrQueryName;
                this.token.isQuery = isQuery;
            };
        {{/isSecure}}

        {{#methods}}
            {{> method}}
        {{/methods}}

        return new {{ &className }}();
    }
    this.$get.$inject = ['$q', '$http'];
}
